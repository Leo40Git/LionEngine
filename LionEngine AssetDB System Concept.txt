LionEngine AssetDB System Concept

assets.lad:
The Asset Database file itself.
STRUCTURES:
	File Header:
	4 bytes - Magic string ("ASST") to identify database
	4 bytes - Total number of groups in file
	Asset Group Header:
	32 bytes - Group name
	4 bytes - Total number of asset entries in group
	Asset Entry:
	32 bytes - Asset name
	4 bytes - Offset in chunk file (see below)
	4 bytes - Compressed size (or 0 if asset is uncompressed)
	4 bytes - Uncompressed size (or size if asset is uncompressed)
The file starts off with the File Header.
Directly after the File Header, the first asset group is defined.
Every asset group starts with the Asset Group Header, then the Asset Entries of the group are defined.

chunks/*.lac:
Chunk files, contain data for every asset of a specific group.
Each asset group has a separate chunk file. A group's chunk file has the same name as the group.
Assets specify the offset to their data in the chunk file.
NOTE: Contains no padding in between asset data.

strings.lad:
String Database file, useful for translation.
STRUCTURES:
	File Header:
	4 bytes - Magic string ("STRS") to identify database
	4 bytes - Current language version
	4 bytes - Total number of strings in file
	String Entry:
	32 bytes - String name
First File Header, then directly after that, String Entries.
Since string length can be different per language, offsets are dynamically calculated rather than directly specified.

lang/*.las (* being a Java Locale langauge tag [IETF BCP 47]):
Language files, contain strings for the String Database.
STRUCTURES:
	File Header:
	4 bytes - Language version. Has to match the one in strings.lad!
	4 bytes - Total number of strings in file
	String Table Entry:
	4 bytes - Offset in file
First File Header, then directly after that, the String Table (built out of String Table Entries).
The String Table specifies the offset for every translated string.

------- SEPARATOR -------

USAGE EXAMPLES:

- To load several assets together in one method call:
	AssetManager.loadGroup("Common"); // will load all assets in the "Common" group

- To allow easy implementation of translations:
	StringManager.loadLanguage("en-US"); // will load language file "en_US.las"
	System.out.println(StringManager.getString("TestString")); // will print translated string "TestString"
